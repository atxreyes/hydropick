#
# Copyright (c) 2014, Texas Water Development Board
# All rights reserved.
#
# This code is open-source. See LICENSE file for details.
#

# Std lib imports
import sys
import os
THIS_DIR = os.path.dirname(__file__)
REL_PATH_PKG = '../..'
pkg = os.path.abspath( os.path.join(THIS_DIR, REL_PATH_PKG))
sys.path=[pkg]+sys.path
print 'package=', pkg

# other imports
import numpy as np

# ETS imports
from traits.api import Instance, HasTraits, Array, Property, Float, Enum, Dict,\
                        List, Str, Int, Bool,Tuple, Dict, File, on_trait_change,\
                        DelegatesTo, Event
from traitsui.api import View, Item, ToolBar

# Local imports
from sdi import binary
from hydropick.model.survey_line import SurveyLine
from survey_line_sample_case import MySurveyLine


class SurveyDataSession(HasTraits):
    """ Model for SurveyLineView.

    Assumes reciept of SurveyLine instance
    """
    # Source of survey line data to be edited
    surveyline = Instance(SurveyLine)

    #: sample locations, an Nx2 array of lat/long (or easting/northing?)
    locations = DelegatesTo('surveyline', 'locations')

    #: a dictionary mapping frequencies to intensity arrays
    # NOTE:  assume arrays are transposed so that img_plot(array)
    # displays them correctly and array.shape gives (xsize,ysize)

    frequencies = DelegatesTo('surveyline', 'frequencies')

    #: relevant core samples
    core_samples = DelegatesTo('surveyline', 'core_samples')

    #: depth of the lake at each location as generated by various soruces
    lake_depths = DelegatesTo('surveyline')

    # and event fired when the lake depths are updated
    lake_depths_updated = Event

    #: pre-impoundment depth at each location as generated by various soruces
    preimpoundment_depths = DelegatesTo('surveyline', 'preimpoundment_depths')

    # and event fired when the lake depth is updated
    preimpoundment_depths_updated = Event

    #: Dictionary of all depth lines. Allows editor easy access to all lines.
    depth_dict = Property(depends_on=['lake_depths', 'preimpoundment_depths'],
                          trait=Instance(Dict))

    # Keys of depth_dict provides list of target choices for line editor
    target_choices = Property(depends_on='depth_dict')

    # Selected target line key from depth dict for editing
    selected_target = Str

    # Keys of frequencies dictionary.
    freq_choices = Property(List, depends_on='frequencies')

    # Selected freq key from frequencies dict for displaying image.
    selected_freq = Str

    # Y bounds should be set based on depth per pixel value of image data.
    # Y axis of depth lines should be set to match this value.
    ybounds = Property(trait=Tuple, depends_on=['pixel_depth_offset',
                                                 'pixel_depth_scale',
                                                 'frequencies'])

    pixel_depth_offset = DelegatesTo('surveyline', 'pixel_depth_offset')
    pixel_depth_scale =DelegatesTo('surveyline', 'pixel_depth_scale')

    # Array to be used for x axis.  Length corresponds to depth lines and
    # image horizontal sizes.  Default is index but may be changed to
    # various actual distances.  Defines xbounds.
    x_array = Property(trait=Array)

    # xbounds used for image display (arguably could be in view class)
    xbounds = Property(trait=Tuple, depends_on='frequencies')

    ymax = Float(0)
    #==========================================================================
    # Defaults
    #==========================================================================


    def _surveyline_default(self):
        return MySurveyLine()

    def _selected_freq_default(self):
        return self.frequencies.keys()[0]

    #==========================================================================
    # Notifications
    #==========================================================================


    #==========================================================================
    # Get/Set
    #==========================================================================
    def _get_freq_choices(self):
        ''' Get list of available frequencies as strings from frequencies dic
        limit resolution to 0.1 kHz.
        '''
        #s = ['{:.1f}'.format(float(freq)) for freq in self.frequencies]
        s = [freq for freq in self.frequencies]
        return s

    def _get_depth_dict(self):
        ''' Combine lake depths and preimpoundment in to one dict.
        '''
        depth_dict={}
        depth_dict.update(self.lake_depths)
        depth_dict.update(self.preimpoundment_depths)
        return depth_dict

    def _get_target_choices(self):
        ''' Get list of available frequencies as strings from frequencies dic
        limit resolution to 0.1 kHz.
        '''
        return self.depth_dict.keys()

    def _get_x_array(self):
        ''' Initially set as horizontal pixel number of arbitrary image'''
        N = self.frequencies.values()[0].shape[1]
        return np.arange(N)

    def _get_xbounds(self):
        return (self.x_array.min(), self.x_array.max())

    def _get_ybounds(self):
        N = self.frequencies.values()[0].shape[0]
        min = self.pixel_depth_offset
        max = min + N * self.pixel_depth_scale
        return (min, max)

if __name__ == '__main__':
    import unittest
    suite = unittest.TestLoader().discover('./tests')
    unittest.TextTestRunner(verbosity=2).run(suite)
